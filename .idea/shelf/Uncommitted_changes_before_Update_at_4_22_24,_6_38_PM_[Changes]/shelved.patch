Index: Backend/database.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/database.py b/Backend/database.py
deleted file mode 100644
--- a/Backend/database.py	(revision 742a18fedb078295284ec80cc3215cf58e382991)
+++ /dev/null	(revision 742a18fedb078295284ec80cc3215cf58e382991)
@@ -1,120 +0,0 @@
-import mysql.connector
-from mysql.connector import Error
-import os
-
-
-db_config = {
-    'host': 'ix-dev.cs.uoregon.edu',
-    'port': 3056,
-    'user': 'group6',
-    'password': 'group6',
-    'database': 'ara_db'
-}
-"""
-
-This handles each chapter by giving it an 
-Id and name for each chapter
-ID auto incraments
-
-CREATE TABLE Chapters (
-    chapter_id INT AUTO_INCREMENT PRIMARY KEY,
-    chapter_name VARCHAR(255) NOT NULL
-);
-
-This handles the chapter notes
-this gives a note id that incraments
-a chapter ID that is linked to the Chapters Table
-
-CREATE TABLE ChapterNotes (
-    note_id INT AUTO_INCREMENT PRIMARY KEY,
-    chapter_id INT,
-    note_file_path VARCHAR(255),
-    FOREIGN KEY (chapter_id) REFERENCES Chapters(chapter_id)
-
-
-This table handles the PDFs 
-CREATE TABLE PdfTable (
-    PdfID INT AUTO_INCREMENT PRIMARY KEY,
-    PdfData LONGBLOB,
-    Filename VARCHAR(255)
-);
-    
-    
-);
-
-"""
-
-def retrieve_pdfs_from_database(connection, output_folder):
-    try:
-        if connection.is_connected():
-            cursor = connection.cursor()
-
-            #Pick the pdf storing table, i named it PdfTable
-            #Also get the filename from the table
-            cursor.execute("SELECT PdfData, Filename FROM PdfTable")
-
-            #get the rows of the table
-            pdf_rows = cursor.fetchall()
-
-            #Not sure if this is allowed, its makedirs for making the directory for the pdfs once receives
-            os.makedirs(output_folder, exist_ok=True)
-
-            #for all the rows in the table recieve the pdf
-            for pdf_data, filename in pdf_rows:
-                output_path = os.path.join(output_folder, filename)
-                with open(output_path, 'wb') as file:
-                    file.write(pdf_data)
-
-            print("PDFs retrieved and saved to", output_folder) #console output to show where the pdfs are recieved
-
-            cursor.close()
-
-    except Error as e:
-        print("Error while retrieving PDFs from the database:", e)
-
-# call for pdfs retrieve_pdfs_from_database(connection, output_folder)
-
-
-def store_pdf_in_database(pdf_folder, connection):
-    try:
-        if connection.is_connected():
-            cursor = connection.cursor()
-
-            for filename in os.listdir(pdf_folder):
-                if filename.endswith(".pdf"):
-                    with open(os.path.join(pdf_folder, filename), 'rb') as file:
-                        pdf_data = file.read()
-
-                    cursor.execute("SELECT COUNT(*) FROM PdfTable WHERE Filename = %s", (filename,))
-                    count = cursor.fetchone()[0]
-
-                    if count == 0:  # PDF with same filename not found in the database, insert it
-                        cursor.execute("INSERT INTO PdfTable (PdfData, Filename) VALUES (%s, %s)", (pdf_data, filename))
-                        print(f"Inserted {filename} into the database.")
-                    else:
-                        print(f"{filename} already in the table, not adding.")
-
-            connection.commit()
-            print("Insert to database successful")
-
-            cursor.close()
-            connection.close()
-
-    except Error as e:
-        print("Error while storing PDFs in the database:", e)
-
-# pdf_folder = "Backend\pdfs" had to do horrible blackslashes for this to work
-# call to create Pdfs  create_pdf_table(connection)
-# Call to store the pdfs  store_pdf_in_database(pdf_folder, connection)
-
-"""
-def insert_chapter(chapter_name):
-
-def insert_chapter_note(chapter_id, note_file_path, pdf_id=None):
-
-Insert a new chapter named Chapter 1 using insert_chapter.
-Retrieve the chapter_id corresponding to Chapter 1 from the Chapters table.
-If the chapter_id is found, use it to insert a new chapter note for Chapter 1 using insert_chapter_note.
-If the chapter_id is not found, print a message indicating that the chapter was not found
-
-"""
\ No newline at end of file
Index: note taker/GG_pages.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/note taker/GG_pages.py b/note taker/GG_pages.py
deleted file mode 100644
--- a/note taker/GG_pages.py	(revision 742a18fedb078295284ec80cc3215cf58e382991)
+++ /dev/null	(revision 742a18fedb078295284ec80cc3215cf58e382991)
@@ -1,136 +0,0 @@
-
-import tkinter as tk
-from tkinter import ttk
-  
- 
-LARGEFONT =("Verdana", 35)
-  
-class tkinterApp(tk.Tk):
-     
-    # __init__ function for class tkinterApp 
-    def __init__(self, *args, **kwargs): 
-         
-        # __init__ function for class Tk
-        tk.Tk.__init__(self, *args, **kwargs)
-         
-        # creating a container
-        container = tk.Frame(self)  
-        container.pack(side = "top", fill = "both", expand = True) 
-  
-        container.grid_rowconfigure(0, weight = 1)
-        container.grid_columnconfigure(0, weight = 1)
-  
-        # initializing frames to an empty array
-        self.frames = {}  
-  
-        # iterating through a tuple consisting
-        # of the different page layouts
-        for F in (StartPage, Page1, Page2):
-  
-            frame = F(container, self)
-  
-            # initializing frame of that object from
-            # startpage, page1, page2 respectively with 
-            # for loop
-            self.frames[F] = frame 
-  
-            frame.grid(row = 0, column = 0, sticky ="nsew")
-  
-        self.show_frame(StartPage)
-  
-    # to display the current frame passed as
-    # parameter
-    def show_frame(self, cont):
-        frame = self.frames[cont]
-        frame.tkraise()
-  
-# first window frame startpage
-  
-class StartPage(tk.Frame):
-    def __init__(self, parent, controller): 
-        tk.Frame.__init__(self, parent)
-         
-        # label of frame Layout 2
-        label = ttk.Label(self, text ="Startpage", font = LARGEFONT)
-         
-        # putting the grid in its place by using
-        # grid
-        label.grid(row = 0, column = 4, padx = 10, pady = 10) 
-  
-        button1 = ttk.Button(self, text ="Page 1",
-        command = lambda : controller.show_frame(Page1))
-     
-        # putting the button in its place by
-        # using grid
-        button1.grid(row = 1, column = 1, padx = 10, pady = 10)
-  
-        ## button to show frame 2 with text layout2
-        button2 = ttk.Button(self, text ="Page 2",
-        command = lambda : controller.show_frame(Page2))
-     
-        # putting the button in its place by
-        # using grid
-        button2.grid(row = 2, column = 1, padx = 10, pady = 10)
-  
-          
-  
-  
-# second window frame page1 
-class Page1(tk.Frame):
-     
-    def __init__(self, parent, controller):
-         
-        tk.Frame.__init__(self, parent)
-        label = ttk.Label(self, text ="Page 1", font = LARGEFONT)
-        label.grid(row = 0, column = 4, padx = 10, pady = 10)
-  
-        # button to show frame 2 with text
-        # layout2
-        button1 = ttk.Button(self, text ="StartPage",
-                            command = lambda : controller.show_frame(StartPage))
-     
-        # putting the button in its place 
-        # by using grid
-        button1.grid(row = 1, column = 1, padx = 10, pady = 10)
-  
-        # button to show frame 2 with text
-        # layout2
-        button2 = ttk.Button(self, text ="Page 2",
-                            command = lambda : controller.show_frame(Page2))
-     
-        # putting the button in its place by 
-        # using grid
-        button2.grid(row = 2, column = 1, padx = 10, pady = 10)
-  
-  
-  
-  
-# third window frame page2
-class Page2(tk.Frame): 
-    def __init__(self, parent, controller):
-        tk.Frame.__init__(self, parent)
-        label = ttk.Label(self, text ="Page 2", font = LARGEFONT)
-        label.grid(row = 0, column = 4, padx = 10, pady = 10)
-  
-        # button to show frame 2 with text
-        # layout2
-        button1 = ttk.Button(self, text ="Page 1",
-                            command = lambda : controller.show_frame(Page1))
-     
-        # putting the button in its place by 
-        # using grid
-        button1.grid(row = 1, column = 1, padx = 10, pady = 10)
-  
-        # button to show frame 3 with text
-        # layout3
-        button2 = ttk.Button(self, text ="Startpage",
-                            command = lambda : controller.show_frame(StartPage))
-     
-        # putting the button in its place by
-        # using grid
-        button2.grid(row = 2, column = 1, padx = 10, pady = 10)
-  
-  
-# Driver Code
-app = tkinterApp()
-app.mainloop()
\ No newline at end of file
Index: note taker/Notepads/Data_Flair_Python_Notepad.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/note taker/Notepads/Data_Flair_Python_Notepad.py b/note taker/Notepads/Data_Flair_Python_Notepad.py
deleted file mode 100644
--- a/note taker/Notepads/Data_Flair_Python_Notepad.py	(revision 742a18fedb078295284ec80cc3215cf58e382991)
+++ /dev/null	(revision 742a18fedb078295284ec80cc3215cf58e382991)
@@ -1,138 +0,0 @@
-#This Code comes from Data Flair: https://data-flair.training/blogs/create-notepad-text-editor-python/
-
-#importing required packages and libraries
-import re
-from tkinter import *
-from tkinter.ttk import *
-from datetime import datetime
-from tkinter import messagebox
-from tkinter import filedialog,simpledialog
-from tkinter.scrolledtext import ScrolledText
-
-#the root widget
-root = Tk()
-root.title('DataFlair Notepad')
-root.resizable(0, 0)
-#creating scrollable notepad window
-notepad = ScrolledText(root, width = 90, height = 40)
-fileName = ' '
-
-#defining functions for commands
-def cmdNew():     #file menu New option
-    global fileName
-    if len(notepad.get('1.0', END+'-1c'))>0:
-        if messagebox.askyesno("Notepad", "Do you want to save changes?"):
-            cmdSave()
-        else:
-            notepad.delete(0.0, END)
-    root.title("Notepad")
-
-def cmdOpen():     #file menu Open option
-    fd = filedialog.askopenfile(parent = root, mode = 'r')
-    t = fd.read()     #t is the text read through filedialog
-    notepad.delete(0.0, END)
-    notepad.insert(0.0, t)
-    
-def cmdSave():     #file menu Save option
-    fd = filedialog.asksaveasfile(mode = 'w', defaultextension = '.txt')
-    if fd!= None:
-        data = notepad.get('1.0', END)
-    try:
-        fd.write(data)
-    except:
-        messagebox.showerror(title="Error", message = "Not able to save file!")
-     
-def cmdSaveAs():     #file menu Save As option
-    fd = filedialog.asksaveasfile(mode='w', defaultextension = '.txt')
-    t = notepad.get(0.0, END)     #t stands for the text gotten from notepad
-    try:
-        fd.write(t.rstrip())
-    except:
-        messagebox.showerror(title="Error", message = "Not able to save file!")
-
-def cmdExit():     #file menu Exit option
-    if messagebox.askyesno("Notepad", "Are you sure you want to exit?"):
-        root.destroy()
-
-def cmdCut():     #edit menu Cut option
-    notepad.event_generate("<<Cut>>")
-
-def cmdCopy():     #edit menu Copy option
-    notepad.event_generate("<<Copy>>")
-
-def cmdPaste():     #edit menu Paste option
-    notepad.event_generate("<<Paste>>")
-
-def cmdClear():     #edit menu Clear option
-    notepad.event_generate("<<Clear>>")
-       
-def cmdFind():     #edit menu Find option
-    notepad.tag_remove("Found",'1.0', END)
-    find = simpledialog.askstring("Find", "Find what:")
-    if find:
-        idx = '1.0'     #idx stands for index
-    while 1:
-        idx = notepad.search(find, idx, nocase = 1, stopindex = END)
-        if not idx:
-            break
-        lastidx = '%s+%dc' %(idx, len(find))
-        notepad.tag_add('Found', idx, lastidx)
-        idx = lastidx
-    notepad.tag_config('Found', foreground = 'white', background = 'blue')
-    notepad.bind("<1>", click)
-
-def click(event):     #handling click event
-    notepad.tag_config('Found',background='white',foreground='black')
-
-def cmdSelectAll():     #edit menu Select All option
-    notepad.event_generate("<<SelectAll>>")
-    
-def cmdTimeDate():     #edit menu Time/Date option
-    now = datetime.now()
-    # dd/mm/YY H:M:S
-    dtString = now.strftime("%d/%m/%Y %H:%M:%S")
-    label = messagebox.showinfo("Time/Date", dtString)
-
-def cmdAbout():     #help menu About option
-    label = messagebox.showinfo("About Notepad", "Notepad by - \nDataFlair")
-
-#notepad menu items
-notepadMenu = Menu(root)
-root.configure(menu=notepadMenu)
-
-#file menu
-fileMenu = Menu(notepadMenu, tearoff = False)
-notepadMenu.add_cascade(label='File', menu = fileMenu)
-
-#adding options in file menu
-fileMenu.add_command(label='New', command = cmdNew)
-fileMenu.add_command(label='Open...', command = cmdOpen)
-fileMenu.add_command(label='Save', command = cmdSave)
-fileMenu.add_command(label='Save As...', command = cmdSaveAs)
-fileMenu.add_separator()
-fileMenu.add_command(label='Exit', command = cmdExit)
-
-#edit menu
-editMenu = Menu(notepadMenu, tearoff = False)
-notepadMenu.add_cascade(label='Edit', menu = editMenu)
-
-#adding options in edit menu
-editMenu.add_command(label='Cut', command = cmdCut)
-editMenu.add_command(label='Copy', command = cmdCopy)
-editMenu.add_command(label='Paste', command = cmdPaste)
-editMenu.add_command(label='Delete', command = cmdClear)
-editMenu.add_separator()
-editMenu.add_command(label='Find...', command = cmdFind)
-editMenu.add_separator()
-editMenu.add_command(label='Select All', command = cmdSelectAll)
-editMenu.add_command(label='Time/Date', command = cmdTimeDate)
-
-#help menu
-helpMenu = Menu(notepadMenu, tearoff = False)
-notepadMenu.add_cascade(label='Help', menu = helpMenu)
-
-#adding options in help menu
-helpMenu.add_command(label='About Notepad', command = cmdAbout)
-
-notepad.pack()
-root.mainloop()
Index: note taker/Ui and Chapter select/CodeWorked_page_swap.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/note taker/Ui and Chapter select/CodeWorked_page_swap.py b/note taker/Ui and Chapter select/CodeWorked_page_swap.py
deleted file mode 100644
--- a/note taker/Ui and Chapter select/CodeWorked_page_swap.py	(revision 742a18fedb078295284ec80cc3215cf58e382991)
+++ /dev/null	(revision 742a18fedb078295284ec80cc3215cf58e382991)
@@ -1,42 +0,0 @@
-import tkinter as tk
-from tkinter import *
-from tkinter import font
-win = tk.Tk()
-
-style1 = font.Font(size = 25)
-style2 = font.Font(size = 20)
-page1 = Frame(win)
-page2 = Frame(win)
-page3 = Frame(win)
-
-page1.grid(row = 0, column= 0, sticky = "nsew")
-page2.grid(row = 0, column= 0, sticky = "nsew")
-page3.grid(row = 0, column= 0, sticky = "nsew")
-
-lb1 = Label(page1, text = "page 1", font = style1)
-lb1.pack(pady=20)
-
-lb2 = Label(page2, text = "page 2", font = style1)
-lb2.pack(pady=20)
-
-lb3 = Label(page3, text = "page 3", font = style1)
-lb3.pack(pady=20)
-
-btn1 = Button(page1, text = "page2", command =lambda: page2.tkraise(), font = style2)
-btn1.pack()
-
-btn2 = Button(page2, text = "page1", command =lambda: page1.tkraise(), font = style2)
-btn2.pack()
-
-btn3 = Button(page2, text = "page3", command =lambda: page3.tkraise(), font = style2)
-btn3.pack()
-
-btn4 = Button(page3, text = "page2", command =lambda: page2.tkraise(), font = style2)
-btn4.pack()
-
-page1.tkraise()
-
-win.geometry("650x650")
-win.title("Multiple Pages application")
-win.resizable(False,False)
-win.mainloop()
\ No newline at end of file
Index: note taker/Notepads/Coding_With_Evan_Notepad.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/note taker/Notepads/Coding_With_Evan_Notepad.py b/note taker/Notepads/Coding_With_Evan_Notepad.py
deleted file mode 100644
--- a/note taker/Notepads/Coding_With_Evan_Notepad.py	(revision 742a18fedb078295284ec80cc3215cf58e382991)
+++ /dev/null	(revision 742a18fedb078295284ec80cc3215cf58e382991)
@@ -1,51 +0,0 @@
-#Code comes from youtube channel "Coding With Evan", has slight adaptations but mostly
-#follows the tutorial to point: https://www.youtube.com/watch?v=gWeo8bZvu8o
-
-from tkinter.filedialog import*
-import tkinter as tk
-
-def saveFile():
-    new_file = asksaveasfile(mode ='w', filetype = [('text files', '.txt')])
-    if new_file is None:
-        return
-    text = str(entry.get(1.0, tk.END))
-    new_file.write(text)
-    new_file.close()
-
-def openFile():
-    file = askopenfile(mode = 'r', filetype = [('text files', '*.txt')])
-    if file is not None:
-        content = file.read()
-    entry.insert(tk.INSERT, content)
-
-def clearFile():
-    entry.delete(1.0, tk.END)
-
-
-#setting up Notepad Canvas
-canvas = tk.Tk()
-canvas.geometry("400x600")  #size
-canvas.title("Notepad") #window title
-canvas.config(bg = "white") #background color
-
-#Buttons
-top = tk.Frame(canvas)  #frame holds the buttons, makes it easier to format
-
-top.pack(padx = 10, pady = 5, anchor = "nw")
-b1 = tk.Button(canvas, text="Open", bg = "white", command = openFile) #command links the button to a function
-b1.pack(in_ = top, side = tk.LEFT)
-
-b2 = tk.Button(canvas, text="Save", bg = "white", command = saveFile)
-b2.pack(in_ = top, side = tk.LEFT)
-
-b3 = tk.Button(canvas, text="Clear", bg = "white", command = clearFile)
-b3.pack(in_ = top, side = tk.LEFT)
-
-b4 = tk.Button(canvas, text="Exit", bg = "white", command = exit)
-b4.pack(in_ = top, side = tk.LEFT)
-
-#text window
-entry = tk.Text(canvas,wrap = tk.WORD, bg = "#F9DDA4", font = ("times", 15))
-entry.pack(padx = 10, pady = 5, expand = tk.TRUE, fill = tk.BOTH)
-
-canvas.mainloop()
\ No newline at end of file
Index: Backend/sql_functions.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/sql_functions.py b/Backend/sql_functions.py
deleted file mode 100644
--- a/Backend/sql_functions.py	(revision 742a18fedb078295284ec80cc3215cf58e382991)
+++ /dev/null	(revision 742a18fedb078295284ec80cc3215cf58e382991)
@@ -1,132 +0,0 @@
-import mysql.connector
-from mysql.connector import Error
-
-
-##
-##This file is just for functions like listing what tables are in the database, as well as clearing the database if needed.
-##
-
-def clear_pdf_table(connection):
-    try:
-        if connection.is_connected():
-            cursor = connection.cursor()
-
-            cursor.execute("DELETE FROM PdfTable")
-            print("PdfTable cleared successfully.")
-
-            connection.commit()
-            cursor.close()
-
-    except Error as e:
-        print("Error while clearing PdfTable:", e)
-
-def list_tables(connection):
-    try:
-        if connection.is_connected():
-            cursor = connection.cursor()
-
-            cursor.execute("SHOW TABLES")
-            tables = cursor.fetchall()
-
-            if tables:
-                print("Existing tables in the database:")
-                for table in tables:
-                    table_name = table[0]
-                    print(f"Table: {table_name}")
-                    cursor.execute(f"DESCRIBE {table_name}")
-                    columns = cursor.fetchall()
-                    print("Attributes:")
-                    for column in columns:
-                        print(f"\t{column[0]} {column[1]}")
-            else:
-                print("No tables found in the database.")
-
-            cursor.close()
-
-    except Error as e:
-        print("Error while listing tables:", e)
-
-
-def create_pdf_table(connection):
-    try:
-        if connection.is_connected():
-            cursor = connection.cursor()
-
-            cursor.execute("SHOW TABLES LIKE 'PdfTable'")
-            table_exists = cursor.fetchone()
-
-            #create the table with longblob whichh is large binary object
-
-            if table_exists:
-                print("PdfTable already exists.")
-            else:
-                #If the table does not exist
-                cursor.execute("CREATE TABLE PdfTable (PdfID INT AUTO_INCREMENT PRIMARY KEY, PdfData LONGBLOB, Filename VARCHAR(255))")
-                print("PdfTable created successfully!")
-
-
-            connection.commit()
-            cursor.close()
-
-    except Error as e:
-        print("Error while creating PdfTable:", e)
-
-def list_pdf_table_filename(connection):
-    try:
-        if connection.is_connected():
-            cursor = connection.cursor()
-
-            cursor.execute("SELECT Filename FROM PdfTable")
-            pdf_data = cursor.fetchall()
-
-            if pdf_data:
-                print("Data in PdfTable:")
-                for row in pdf_data:
-                    filename = row[0]  # Extracting the filename from the row
-                    print(filename)
-            else:
-                print("PdfTable is empty.")
-
-            cursor.close()
-
-    except Error as e:
-        print("Error while listing PdfTable data:", e)
-
-    except Error as e:
-        print("Error while listing PdfTable data:", e)
-
-if __name__ == "__main__":
-    #This is the pdf folcer that will store the pdfs
-
-    #NEED TO CHANGE THIS
-    pdf_folder = "Backend\pdfs" #had to do horrible blackslashes for this to work
-
-    #for this from connections.py, not sure if i need it here
-    db_config = {
-        'host': 'ix-dev.cs.uoregon.edu',
-        'port': 3056,
-        'user': 'group6',
-        'password': 'group6',
-        'database': 'ara_db'
-    }
-
-    try:
-        connection = mysql.connector.connect(**db_config)
-
-        if connection.is_connected():
-            print("Connected to MySQL Server")
-
-            #clear_pdf_table(connection)
-            list_tables(connection)
-            list_pdf_table_filename(connection)
-  
-
-            #This is where i call the function to store any pdfs into the table from mySQL
-
-    except Error as e:
-        print("Error while connecting to MySQL:", e)
-    finally:
-        #close it once its done.
-        if connection.is_connected():
-            connection.close()
-            print("MySQL connection is closed")
\ No newline at end of file
Index: note taker/Ui and Chapter select/Chapter_Select.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/note taker/Ui and Chapter select/Chapter_Select.py b/note taker/Ui and Chapter select/Chapter_Select.py
deleted file mode 100644
--- a/note taker/Ui and Chapter select/Chapter_Select.py	(revision 742a18fedb078295284ec80cc3215cf58e382991)
+++ /dev/null	(revision 742a18fedb078295284ec80cc3215cf58e382991)
@@ -1,63 +0,0 @@
-import tkinter as tk
-from tkinter import font, Frame, Label, Button
-import os
-
-win = tk.Tk()
-
-
-def fill_chapter_frame(sections_frame, chapter_path, prev_frame):
-    files = os.listdir(chapter_path)
-    print(chapter_path)  # debug print
-    sec_buts = []
-    for i, file_name in enumerate(files):
-        print("\t" + file_name)  # debug print
-        sec_buts.append(
-            tk.Button(sections_frame, text=file_name, bg="white", height=5, width=50, font=("times", 10), pady=10))
-        sec_buts[i].pack(padx=0)
-    sec_buts.append(Button(sections_frame, text="page2", command=lambda: prev_frame.tkraise(), font=style2))
-    sec_buts[-1].pack()
-    print(sections_frame)
-
-
-style1 = font.Font(size=25)
-style2 = font.Font(size=20)
-page1 = Frame(win)
-page2 = Frame(win)
-
-page1.grid(row=0, column=0, sticky="nsew")
-page2.grid(row=0, column=0, sticky="nsew")
-
-lb1 = Label(page1, text="page 1", font=style1)
-lb1.pack(pady=20)
-
-lb2 = Label(page2, text="page 2", font=style1)
-lb2.pack(pady=20)
-
-btn1 = Button(page1, text="page2", command=lambda: page2.tkraise(), font=style2)
-btn1.pack()
-
-directory = os.getcwd()
-files = os.listdir(directory)
-sections = []
-buttons = []
-
-for i, file in enumerate(files):
-    chapter_path = os.path.join(directory, file)
-    if os.path.isdir(chapter_path):  # Make sure it's a directory
-        sections.append(Frame(win))
-        sections[i].grid(row=0, column=0, sticky="nsew")
-        fill_chapter_frame(sections[i], chapter_path, page2)
-
-        buttons.append(tk.Button(page2, text=file, command=lambda i=i: sections[i].tkraise(),
-                                 bg="white", height=5, width=50, font=("times", 10), pady=10))
-        buttons[i].pack(padx=100)
-
-btn2 = Button(page2, text="page1", command=lambda: page1.tkraise(), font=style2)
-btn2.pack()
-
-page1.tkraise()
-
-win.geometry("650x650")
-win.title("Multiple Pages application")
-win.resizable(False, False)
-win.mainloop()
Index: Backend/retrieve_pdf.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/retrieve_pdf.py b/Backend/retrieve_pdf.py
new file mode 100644
--- /dev/null	(date 1713752518000)
+++ b/Backend/retrieve_pdf.py	(date 1713752518000)
@@ -0,0 +1,58 @@
+import mysql.connector
+from mysql.connector import Error
+import os
+
+def retrieve_pdfs_from_database(connection, output_folder):
+    try:
+        if connection.is_connected():
+            cursor = connection.cursor()
+
+            #Pick the pdf storing table
+            cursor.execute("SELECT PdfData FROM PdfTable")
+
+            #get the rows of the table
+            pdf_rows = cursor.fetchall()
+
+            #Not sure if this is allowed, its makedirs for making the directory for the pdfs once receives
+            os.makedirs(output_folder, exist_ok=True)
+
+            #for all the rows in the table recieve the pdf
+            for index, pdf_data in enumerate(pdf_rows):
+                filename = f"received_pdf_{index + 1}.pdf"
+                output_path = os.path.join(output_folder, filename) #add the path of the directory to store the pdfs
+                with open(output_path, 'wb') as file:
+                    file.write(pdf_data[0])
+
+            print("PDFs retrieved and saved to", output_folder) #console output to show where the pdfs are recieved
+
+            cursor.close()
+
+    except Error as e:
+        print("Error while retrieving PDFs from the database:", e)
+
+if __name__ == "__main__":
+    output_folder = "Backend/received_pdfs"
+
+    db_config = { #same as the other send_pdf
+        'host': 'ix-dev.cs.uoregon.edu',
+        'port': 3056,
+        'user': 'group6',
+        'password': 'group6',
+        'database': 'ara_db'
+    }
+
+    try:
+        connection = mysql.connector.connect(**db_config)
+
+        if connection.is_connected():
+            print("Connected to MySQL Server")
+
+            #this is the call for the pdfs
+            retrieve_pdfs_from_database(connection, output_folder)
+
+    except Error as e:
+        print("Error while connecting to MySQL:", e)
+    finally:
+        if connection.is_connected():
+            connection.close()
+            print("MySQL connection is closed")
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1713751951000)
+++ b/.idea/.gitignore	(date 1713751951000)
@@ -0,0 +1,8 @@
+# Default ignored files
+/shelf/
+/workspace.xml
+# Editor-based HTTP Client requests
+/httpRequests/
+# Datasource local storage ignored files
+/dataSources/
+/dataSources.local.xml
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1713774641000)
+++ b/.idea/vcs.xml	(date 1713774641000)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/inspectionProfiles/profiles_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
new file mode 100644
--- /dev/null	(date 1713774641000)
+++ b/.idea/inspectionProfiles/profiles_settings.xml	(date 1713774641000)
@@ -0,0 +1,6 @@
+<component name="InspectionProjectProfileManager">
+  <settings>
+    <option name="USE_PROJECT_PROFILE" value="false" />
+    <version value="1.0" />
+  </settings>
+</component>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1713774641000)
+++ b/.idea/misc.xml	(date 1713774641000)
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.10 (CS422-ARA)" project-jdk-type="Python SDK" />
+</project>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1713774641000)
+++ b/.idea/modules.xml	(date 1713774641000)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/CS422-ARA.iml" filepath="$PROJECT_DIR$/.idea/CS422-ARA.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/CS422-ARA.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/CS422-ARA.iml b/.idea/CS422-ARA.iml
new file mode 100644
--- /dev/null	(date 1713775298000)
+++ b/.idea/CS422-ARA.iml	(date 1713775298000)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+  <component name="PyDocumentationSettings">
+    <option name="format" value="PLAIN" />
+    <option name="myDocStringFormat" value="Plain" />
+  </component>
+</module>
\ No newline at end of file
Index: Backend/send_pdf_to_database.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/send_pdf_to_database.py b/Backend/send_pdf_to_database.py
new file mode 100644
--- /dev/null	(date 1713752518000)
+++ b/Backend/send_pdf_to_database.py	(date 1713752518000)
@@ -0,0 +1,78 @@
+import mysql.connector
+from mysql.connector import Error
+
+
+def create_pdf_table(connection):
+    try:
+        if connection.is_connected():
+            cursor = connection.cursor()
+
+            #create the table with longblob whichh is large binary object
+            cursor.execute("CREATE TABLE IF NOT EXISTS PdfTable (PdfID INT AUTO_INCREMENT PRIMARY KEY, PdfData LONGBLOB)")
+
+            connection.commit()
+            print("PdfTable created successfully!")
+
+            cursor.close()
+
+    except Error as e:
+        print("Error while creating PdfTable:", e)
+
+
+def store_pdf_in_database(pdf_folder, connection):
+    try:
+        if connection.is_connected():
+            cursor = connection.cursor()
+
+            #From what ive seen you have to iterate over all the pdf's located in the pdfs directory
+            #this seems horrible so idk
+            for filename in ["dummy1.pdf", "dummy2.pdf", "dummy3.pdf"]: #this i think works only for these 3? idk i have to check
+                #print("Opening file:", pdf_folder + "/" + filename)
+                with open(pdf_folder + "/" + filename, 'rb') as file:
+                    pdf_data = file.read()
+
+                #This is to insert the binary data into the pdfdata table made earlier
+                cursor.execute("INSERT INTO PdfTable (PdfData) VALUES (%s)", (pdf_data,))
+
+            connection.commit()
+            print("PDFs inserted successfully!")
+
+            cursor.close()
+            connection.close()
+
+    except Error as e:
+        print("Error while storing PDFs in the database:", e)
+
+if __name__ == "__main__":
+    #This is the pdf folcer that will store the pdfs
+
+    #NEED TO CHANGE THIS
+    pdf_folder = r"C:\Users\SLUGS\CS422\CS422-ARA\CS422-ARA\Backend\pdfs" #had to do horrible blackslashes for this to work
+
+    #for this from connections.py, not sure if i need it here
+    db_config = {
+        'host': 'ix-dev.cs.uoregon.edu',
+        'port': 3056,
+        'user': 'group6',
+        'password': 'group6',
+        'database': 'ara_db'
+    }
+
+    try:
+        connection = mysql.connector.connect(**db_config)
+
+        if connection.is_connected():
+            print("Connected to MySQL Server")
+
+            create_pdf_table(connection) #create the table
+
+            #This is where i call the function to store any pdfs into the table from mySQL
+            store_pdf_in_database(pdf_folder, connection)
+
+    except Error as e:
+        print("Error while connecting to MySQL:", e)
+    finally:
+        #close it once its done.
+        if connection.is_connected():
+            connection.close()
+            print("MySQL connection is closed")
Index: Backend/communication.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/communication.py b/Backend/communication.py
new file mode 100644
--- /dev/null	(date 1713752518000)
+++ b/Backend/communication.py	(date 1713752518000)
@@ -0,0 +1,23 @@
+import mysql.connector
+from mysql.connector import Error
+
+db_config = {
+    'host': 'ix-dev.cs.uoregon.edu',
+    'port': 3056,
+    'user': 'group6',
+    'password': 'group6',
+    'database': 'ara_db'
+}
+"""
+User Table holds 
+Username 
+User ID # it is auto incramented everytime a new user is created
+
+
+Notes Table holds 
+User ID // has a refrence to the other table 
+Note ID
+Note text // holds the txt
+
+"""
+
diff --git a/note taker/Ui and Chapter select/fake chapters/ch3/paper.txt b/note taker/Ui and Chapter select/fake chapters/ch3/paper.txt
deleted file mode 100644
diff --git a/note taker/Ui and Chapter select/fake chapters/ch1/life.txt b/note taker/Ui and Chapter select/fake chapters/ch1/life.txt
deleted file mode 100644
diff --git a/note taker/Ui and Chapter select/fake chapters/ch2/fame.txt b/note taker/Ui and Chapter select/fake chapters/ch2/fame.txt
deleted file mode 100644
diff --git a/note taker/Ui and Chapter select/fake chapters/ch1/death.txt b/note taker/Ui and Chapter select/fake chapters/ch1/death.txt
deleted file mode 100644
diff --git a/note taker/Ui and Chapter select/fake chapters/ch3/sicissors.txt b/note taker/Ui and Chapter select/fake chapters/ch3/sicissors.txt
deleted file mode 100644
diff --git a/note taker/Ui and Chapter select/fake chapters/ch3/rock.txt b/note taker/Ui and Chapter select/fake chapters/ch3/rock.txt
deleted file mode 100644
diff --git a/note taker/Ui and Chapter select/fake chapters/ch2/power.txt b/note taker/Ui and Chapter select/fake chapters/ch2/power.txt
deleted file mode 100644
diff --git a/note taker/Ui and Chapter select/fake chapters/ch2/money.txt b/note taker/Ui and Chapter select/fake chapters/ch2/money.txt
deleted file mode 100644
diff --git a/note taker/Ui and Chapter select/fake chapters/ch1/taxes.txt b/note taker/Ui and Chapter select/fake chapters/ch1/taxes.txt
deleted file mode 100644
